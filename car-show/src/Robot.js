/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from "three";
import gsap from "gsap";

export function Model({
	position = [0, 0, 0],
	color = [1, 1, 1],
	url = "./doggo.glb",
	speed = 3,
	animation = "RobotDog@Dancing",
	...props
}) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF(url);
	const { actions } = useAnimations(animations, group);

	const animateModel = () => {
		// const randomSpeed = 3; // Random speed between 2 and 3
		const randomSpeed = Math.random() * 0.2 + 3;
		actions[animation].timeScale = randomSpeed;

		const randomDirection = Math.random() > 0.5 ? 1 : -1; // Randomly pick a direction: 1 for forward, -1 for backward
		const randomDistance = Math.random() * 0.5; // Random distance between 0 and 0.2

		const newPosition =
			group.current.position.z + randomDirection * randomDistance; // Compute the new position

		// Check if the new position is within bounds
		const maxDistance = 3.0; // You can adjust this value

		if (Math.abs(newPosition) <= maxDistance) {
			gsap.to(group.current.position, {
				z: newPosition,
				duration: 1.5,
				onComplete: animateModel, // Call animateModel function again after animation completes
			});
		} else {
			// If the new position is out of bounds, revert to within the bounds and then call the animation again
			const adjustedPosition = newPosition > 0 ? maxDistance : -maxDistance;
			gsap.to(group.current.position, {
				z: adjustedPosition,
				duration: 1.5,
				onComplete: animateModel, // Call animateModel function again after animation completes
			});
		}
	};

	useEffect(() => {
		Object.values(materials).forEach((material) => {
			if (material.isMeshStandardMaterial) {
				material.envMapIntensity = 5; // Set your desired intensity value
			}
		});

		// Set roughness for the M_Body_Yellow material
		if (materials.M_Body_Yellow) {
			materials.M_Body_Yellow.color = new THREE.Color(...color);
			materials.M_Body_Yellow.roughness = 0.0; // Set your desired roughness value
		}

		// Set castShadow and receiveShadow for all meshes
		group.current.traverse((child) => {
			if (child instanceof THREE.Mesh || child instanceof THREE.SkinnedMesh) {
				child.castShadow = true;
				//child.receiveShadow = true;
			}
		});

		actions[animation].timeScale = speed; // Set animation speed to 2x
		actions[animation].play();

		// Initial call to start the animation
		//delay for 2 seconds on start
		setTimeout(() => {
			animateModel();
		}, 2000);
		// Set Timeout to stop animation after 3 seconds
		// const timeout = setTimeout(() => {
		// 	actions[animation].stop();

		// 	animation = "RobotDog@TurnOff";
		// 	// actions[animation].setLoop(THREE.LoopOnce, 1);
		// 	actions[animation].timeScale = 2; // Set animation speed to 2x
		// 	actions[animation].play();

		// 	setTimeout(() => {
		// 		// actions[animation].stop();

		// 		actions[animation].paused = true;
		// 	}, 500);
		// }, 3000);

		// return () => {
		// 	clearTimeout(timeout);
		// };
	}, [actions, materials]);
	return (
		<group ref={group} position={position} {...props} dispose={null}>
			<group name="Scene">
				<group name="UE_RIG" scale={0.01}>
					<skinnedMesh
						name="Body_1"
						geometry={nodes.Body_1.geometry}
						material={materials.M_Body_Yellow}
						skeleton={nodes.Body_1.skeleton}
					/>
					<skinnedMesh
						name="Body_4"
						geometry={nodes.Body_4.geometry}
						material={materials.M_Body_Yellow}
						skeleton={nodes.Body_4.skeleton}
					/>
					<skinnedMesh
						name="Body_5"
						geometry={nodes.Body_5.geometry}
						material={materials.M_Body_Yellow}
						skeleton={nodes.Body_5.skeleton}
					/>
					<skinnedMesh
						name="Body_6"
						geometry={nodes.Body_6.geometry}
						material={materials.M_Body_Yellow}
						skeleton={nodes.Body_6.skeleton}
					/>
					<skinnedMesh
						name="Leg_1"
						geometry={nodes.Leg_1.geometry}
						material={materials.M_Leg_Yellow}
						skeleton={nodes.Leg_1.skeleton}
					/>
					<skinnedMesh
						name="Leg_4"
						geometry={nodes.Leg_4.geometry}
						material={materials.M_Leg_Yellow}
						skeleton={nodes.Leg_4.skeleton}
					/>
					<skinnedMesh
						name="Leg_5"
						geometry={nodes.Leg_5.geometry}
						material={materials.M_Leg_Yellow}
						skeleton={nodes.Leg_5.skeleton}
					/>
					<skinnedMesh
						name="Leg_6"
						geometry={nodes.Leg_6.geometry}
						material={materials.M_Leg_Yellow}
						skeleton={nodes.Leg_6.skeleton}
					/>
					<skinnedMesh
						name="Leg_7"
						geometry={nodes.Leg_7.geometry}
						material={materials.M_Leg_Yellow}
						skeleton={nodes.Leg_7.skeleton}
					/>
					<primitive object={nodes.Root} />
				</group>
				<group name="Circle001" position={[1.662, 0, 0]} scale={0.44} />
				<group name="Empty" position={[1.648, 0, 0]} scale={0.116} />
				<group name="Circle002" position={[1.656, 0, 0]} scale={0.266} />
				<group name="Circle004" position={[1.649, 0, 0]} scale={0.344} />
				<group name="UE_RIG001" scale={0.01}>
					<primitive object={nodes.Root_1} />
				</group>
			</group>
		</group>
	);
}
